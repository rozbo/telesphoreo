--- /usr/include/Security/Authorization.h	2008-02-19 11:34:25.000000000 +0000
+++ /usr/include/Security/Authorization.h	2008-03-24 11:07:40.000000000 +0000
@@ -30,7 +30,7 @@
 #ifndef _SECURITY_AUTHORIZATION_H_
 #define _SECURITY_AUTHORIZATION_H_
 
-#include <CoreServices/../Frameworks/CarbonCore.framework/Headers/MacTypes.h>
+#include <MacTypes.h>
 #include <stdio.h>
 
 #if defined(__cplusplus)
--- /usr/include/AvailabilityMacros.h	2008-02-27 06:49:24.000000000 +0000
+++ /usr/include/AvailabilityMacros.h	2008-03-28 14:10:13.000000000 +0000
@@ -84,7 +84,13 @@
     #ifdef __ENVIRONMENT_MAC_OS_X_VERSION_MIN_REQUIRED__
         #define MAC_OS_X_VERSION_MIN_REQUIRED __ENVIRONMENT_MAC_OS_X_VERSION_MIN_REQUIRED__
     #else
-        #if __ppc64__ || __i386__ || __x86_64__
+        #ifdef __ENVIRONMENT_ASPEN_VERSION_MIN_REQUIRED__
+            #if __ENVIRONMENT_ASPEN_VERSION_MIN_REQUIRED__ < 10200
+                #define MAC_OS_X_VERSION_MIN_REQUIRED MAC_OS_X_VERSION_10_4
+            #else
+                #define MAC_OS_X_VERSION_MIN_REQUIRED MAC_OS_X_VERSION_10_5
+            #endif
+        #elif __ppc64__ || __i386__ || __x86_64__
             #define MAC_OS_X_VERSION_MIN_REQUIRED MAC_OS_X_VERSION_10_4
 		#elif __arm__
 			#define MAC_OS_X_VERSION_MIN_REQUIRED MAC_OS_X_VERSION_10_5
--- /usr/include/CoreFoundation/CoreFoundation.h	2008-02-27 06:36:09.000000000 +0000
+++ /usr/include/CoreFoundation/CoreFoundation.h	2008-03-29 18:47:27.000000000 +0000
@@ -78,7 +78,7 @@
 #include <CoreFoundation/CFMachPort.h>
 #include <CoreFoundation/CFUserNotification.h>
 #endif
-#if (TARGET_OS_MAC && !TARGET_OS_EMBEDDED)
+#if (TARGET_OS_MAC && !TARGET_OS_EMBEDDED) || TARGET_OS_EMBEDDED
 #include <CoreFoundation/CFXMLNode.h>
 #include <CoreFoundation/CFXMLParser.h>
 #ifndef CF_OPEN_SOURCE
--- /usr/include/CarbonCore/FixMath.h	2008-02-19 12:14:55.000000000 +0000
+++ /usr/include/CarbonCore/FixMath.h	2008-03-27 09:50:49.000000000 +0000
@@ -90,7 +90,7 @@
 
 #else
 
-    #error "Unknown architecture."
+    //#error "Unknown architecture."
     // To use unoptimized standard C code, remove above line.
     #define _IntSaturate(x) ((x) <= -0x1p31f ? (int) -0x80000000 : \
         0x1p31f <= (x) ? (int) 0x7fffffff : (int) (x))
--- /usr/include/CarbonCore/fp.h	2008-02-19 12:14:55.000000000 +0000
+++ /usr/include/CarbonCore/fp.h	2008-03-29 18:41:50.000000000 +0000
@@ -1314,7 +1314,7 @@
 *   dec2l       Similar to dec2num except a long is returned.                   *
 *                                                                               *
 ********************************************************************************/
-#if TARGET_CPU_PPC || TARGET_CPU_X86 || TARGET_CPU_PPC64 || TARGET_CPU_X86_64
+#if TARGET_CPU_PPC || TARGET_CPU_X86 || TARGET_CPU_PPC64 || TARGET_CPU_X86_64 || TARGET_CPU_ARM
     #define SIGDIGLEN      36  
 #endif
 #define      DECSTROUTLEN   80               /* max length for dec2str output */
--- /usr/include/machine/locks.h	2008-04-18 07:47:44.000000000 +0000
+++ /usr/include/machine/locks.h	2008-04-18 07:46:43.000000000 +0000
@@ -27,6 +27,8 @@
 #include "ppc/locks.h"
 #elif defined (__i386__)
 #include "i386/locks.h"
+#elif defined (__arm__)
+#include "arm/locks.h"
 #else
 #error architecture not supported
 #endif
--- /usr/include/CarbonCore/MachineExceptions.h	2006-09-11 23:05:25.000000000 -0500
+++ /usr/include/CarbonCore/MachineExceptions.h	2007-07-23 18:15:13.000000000 -0500
@@ -277,6 +277,60 @@
 typedef struct ExceptionInformation     ExceptionInformation;
 #endif  /* TARGET_CPU_X86 */
 
+#if TARGET_CPU_ARM
+
+struct MachineInformationARM {
+    int unused;
+};
+typedef struct MachineInformationARM MachineInformationARM;
+
+struct RegisterInformationARM {
+    unsigned int R0; 
+    unsigned int R1; 
+    unsigned int R2; 
+    unsigned int R3; 
+    unsigned int R4; 
+    unsigned int R5; 
+    unsigned int R6; 
+    unsigned int R7; 
+    unsigned int R8; 
+    unsigned int R9; 
+    unsigned int R10; 
+    unsigned int R11; 
+    unsigned int R12; 
+    unsigned int R13; 
+    unsigned int R14; 
+    unsigned int R15; 
+    unsigned int R16; 
+    unsigned int R17; 
+};
+typedef struct RegisterInformationARM RegisterInformationARM;
+
+struct FPUInformationARM {
+    unsigned int dunno; /* FIXME */
+};
+typedef struct FPUInformationARM FPUInformationARM;
+
+struct VectorInformationARM {
+    unsigned int dunno[8];
+};
+typedef struct VectorInformationARM VectorInformationARM;
+
+typedef MachineInformationARM         MachineInformation;
+typedef RegisterInformationARM        RegisterInformation;
+typedef FPUInformationARM             FPUInformation;
+typedef VectorInformationARM          VectorInformation;
+struct ExceptionInformation {
+  ExceptionKind       theKind;
+  MachineInformation * machineState;
+  RegisterInformation * registerImage;
+  FPUInformation *    FPUImage;
+  ExceptionInfo       info;
+  VectorInformation * vectorImage;
+};
+typedef struct ExceptionInformation     ExceptionInformation;
+#endif
+
 /* 
     Note:   An ExceptionHandler is NOT a UniversalProcPtr, except in Carbon.
             It must be a PowerPC function pointer with NO routine descriptor, 
diff -ru /apl/inc/Foundation/NSAffineTransform.h /apl/32/Foundation/NSAffineTransform.h
--- /apl/inc/Foundation/NSAffineTransform.h	2008-02-19 13:11:39.000000000 +0000
+++ /apl/32/Foundation/NSAffineTransform.h	2008-04-20 02:53:18.000000000 +0000
@@ -4,7 +4,7 @@
 
 #import <Foundation/NSObject.h>
 #import <Foundation/NSGeometry.h>
-#import <ApplicationServices/../Frameworks/CoreGraphics.framework/Headers/CGAffineTransform.h>
+#import <CoreGraphics/CGAffineTransform.h>
 
 typedef struct {
     CGFloat m11, m12, m21, m22;
diff -ru /apl/inc/Foundation/NSGeometry.h /apl/32/Foundation/NSGeometry.h
--- /apl/inc/Foundation/NSGeometry.h	2008-02-19 13:11:41.000000000 +0000
+++ /apl/32/Foundation/NSGeometry.h	2008-04-20 02:52:14.000000000 +0000
@@ -6,8 +6,8 @@
 #import <Foundation/NSValue.h>
 #import <Foundation/NSCoder.h>
 
-#import <ApplicationServices/../Frameworks/CoreGraphics.framework/Headers/CGBase.h>
-#import <ApplicationServices/../Frameworks/CoreGraphics.framework/Headers/CGGeometry.h>
+#import <CoreGraphics/CGBase.h>
+#import <CoreGraphics/CGGeometry.h>
 
 #if __LP64__ || NS_BUILD_32_LIKE_64
 
diff --git /usr/include/Security/KCExceptions.h /usr/include/Security/KCExceptions.h
index 3c62f78..e0abd87 100644
--- /usr/include/Security/KCExceptions.h
+++ /usr/include/Security/KCExceptions.h
@@ -28,7 +28,7 @@
 #ifndef _SECURITY_KCEXCEPTIONS_H_
 #define _SECURITY_KCEXCEPTIONS_H_
 
-#include <CoreServices/../Frameworks/CarbonCore.framework/Headers/MacErrors.h>
+#include <CarbonCore/MacErrors.h>
 #include <security_utilities/errors.h>
 
 #ifdef lock
diff --git /usr/include/Security/KCUtilities.h /usr/include/Security/KCUtilities.h
index 7658350..137ac00 100644
--- /usr/include/Security/KCUtilities.h
+++ /usr/include/Security/KCUtilities.h
@@ -25,7 +25,7 @@
 #define _SECURITY_KCUTILITIES_H_
 
 #include <security_utilities/errors.h>
-#include <CoreServices/../Frameworks/CarbonCore.framework/Headers/MacErrors.h>
+#include <CarbonCore/MacErrors.h>
 
 namespace Security
 {
diff --git /usr/include/Security/Keychains.h /usr/include/Security/Keychains.h
index 90ef927..f6e8e78 100644
--- /usr/include/Security/Keychains.h
+++ /usr/include/Security/Keychains.h
@@ -106,7 +106,7 @@ private:
 	typedef KeychainSchemaImpl Impl;
 };
 
-
+class ItemImpl;
 class KeychainImpl : public SecCFObject, private CssmClient::Db::DefaultCredentialsMaker
 {
     NOCOPY(KeychainImpl)
diff --git /usr/include/Security/cs.h /usr/include/Security/cs.h
index d7957fc..87e31ca 100644
--- /usr/include/Security/cs.h
+++ /usr/include/Security/cs.h
@@ -31,7 +31,7 @@
 #include <Security/CodeSigning.h>
 #include <Security/SecCodeSigner.h>
 #include <Security/SecBasePriv.h>
-#include <CoreServices/../Frameworks/CarbonCore.framework/Headers/MacErrors.h>
+#include <CarbonCore/MacErrors.h>
 #include <security_utilities/globalizer.h>
 #include <security_utilities/seccfobject.h>
 #include <security_utilities/cfclass.h>
diff --git /usr/include/Security/cspclient.h /usr/include/Security/cspclient.h
index 8aab4b4..2ffe721 100644
--- /usr/include/Security/cspclient.h
+++ /usr/include/Security/cspclient.h
@@ -67,8 +67,8 @@ public:
 	Context(const CSP &csp, CSSM_ALGORITHMS alg = CSSM_ALGID_NONE);
 	~Context();
 
-	CSP Context::attachment() const { return parent<CSP>(); }
-	Module Context::module() const { return attachment()->module(); }
+	CSP attachment() const { return parent<CSP>(); }
+	Module module() const { return attachment()->module(); }
 	
 	CSSM_ALGORITHMS algorithm() const { return mAlgorithm; }
 	void algorithm(CSSM_ALGORITHMS alg);
diff --git /usr/include/Security/mach++.h /usr/include/Security/mach++.h
index 93cae91..e539b83 100644
--- /usr/include/Security/mach++.h
+++ /usr/include/Security/mach++.h
@@ -192,7 +192,7 @@ private:
 	mutable char nameBuffer[BOOTSTRAP_MAX_NAME_LEN];
     
 protected:
-	char *Bootstrap::makeName(const char *s) const
+	char *makeName(const char *s) const
 	{ return strncpy(nameBuffer, s, BOOTSTRAP_MAX_NAME_LEN); }
 };
 
diff --git /usr/include/Security/objectacl.h /usr/include/Security/objectacl.h
index 0be1f62..c9ec079 100644
--- /usr/include/Security/objectacl.h
+++ /usr/include/Security/objectacl.h
@@ -125,7 +125,7 @@ public:
         virtual bool validate(const AclValidationContext &ctx) const = 0;
 
 		template <class Action>
-		void ObjectAcl::Entry::exportBlob(Action &pub, Action &priv)
+		void exportBlob(Action &pub, Action &priv)
 		{
 			Endian<uint32> del = delegate; pub(del);	// 4 bytes delegate flag
 			exportSubject(subject, pub, priv);	// subject itself (polymorphic)
@@ -197,7 +197,7 @@ public:
 	// These helpers deal with transferring one subject from/to reader/writer streams.
 	// You'd usually only call those from complex subject implementations (e.g. threshold)
 	template <class Action>
-	static void ObjectAcl::exportSubject(AclSubject *subject, Action &pub, Action &priv)
+	static void exportSubject(AclSubject *subject, Action &pub, Action &priv)
 	{
 		Endian<uint32> typeAndVersion = subject->type() | subject->version() << AclSubject::versionShift;
 		pub(typeAndVersion);
--- /usr/include/arm/signal.h	2008-02-27 05:37:19.000000000 +0000
+++ /usr/include/arm/signal.h	2008-03-24 09:51:14.000000000 +0000
@@ -13,6 +13,8 @@
 
 #ifndef _ANSI_SOURCE
 
+typedef int sig_atomic_t;
+
 #ifdef __APPLE_API_OBSOLETE
 
 #if !defined(_POSIX_C_SOURCE) || defined(_DARWIN_C_SOURCE)
@@ -20,8 +22,6 @@
 #define __need_struct_sigcontext
 #include <arm/_structs.h>
 
-typedef int sig_atomic_t;
-
 #endif /* (_POSIX_C_SOURCE && !_DARWIN_C_SOURCE) */
 
 #endif /* __APPLE_API_OBSOLETE */
diff --git /usr/include/c++/4.0.0/arm-apple-darwin8/bits/c++config.h /usr/include/c++/4.0.0/arm-apple-darwin8/bits/c++config.h
index b570daa..3309946 100644
--- /usr/include/c++/4.0.0/arm-apple-darwin8/bits/c++config.h
+++ /usr/include/c++/4.0.0/arm-apple-darwin8/bits/c++config.h
@@ -127,7 +127,7 @@ namespace std
 #define _GLIBCXX_USE_C99_COMPLEX 1
 
 // Define if code specialized for wchar_t should be used.
-#define _GLIBCXX_USE_WCHAR_T 1
+/* #undef _GLIBCXX_USE_WCHAR_T */
 
 // Define if using setrlimit to set resource limits during 'make check'.
 #define _GLIBCXX_RES_LIMITS 1
diff --git /usr/include/c++/4.0.0/bits/stringfwd.h /usr/include/c++/4.0.0/bits/stringfwd.h
index 99d3ce3..cc033d6 100644
--- /usr/include/c++/4.0.0/bits/stringfwd.h
+++ /usr/include/c++/4.0.0/bits/stringfwd.h
@@ -61,9 +61,9 @@ namespace std
 
 #ifdef _GLIBCXX_USE_WCHAR_T
   template<> struct char_traits<wchar_t>;
+#endif
 
   typedef basic_string<wchar_t> wstring;
-#endif
 } // namespace std
 
 #endif	// _STRINGFWD_H
